-----------------------------------------------------------------------
--             DO NOT EDIT THIS FILE. IT IS AUTOGENERATED            --
-- Edit the original file in the macroed_functions directory instead --
-----------------------------------------------------------------------
CREATE OR REPLACE FUNCTION tm_cz.i2b2_remove_analysis (
    etlID bigint,
    currentJobID bigint DEFAULT null
)
RETURNS BIGINT AS $body$
DECLARE
    newJobFlag    smallint;
    databaseName  varchar(100);
    procedureName varchar(100);
    jobID         bigint;
    stepCt        bigint;
    rowCt         bigint;
    errorNumber   varchar;
    errorMessage  varchar;

    analysis_id bigint;
    E_ID        bigint;
BEGIN
    E_ID := etlID;
    --Set Audit Parameters
    newJobFlag := 0; -- False (Default)
    jobID := currentJobID;
    SELECT current_user INTO databaseName; --(sic)
    procedureName := 'I2B2_REMOVE_ANALYSIS';

    --Audit JOB Initialization
    --If Job ID does not exist, then this is a single procedure run and we need to create it
    IF (coalesce(jobID::text, '') = '' OR jobID < 1)
        THEN
        newJobFlag := 1; -- True
        SELECT cz_start_audit(procedureName, databaseName) INTO jobID;
    END IF;
    PERFORM cz_write_audit(jobId, databaseName, procedureName,
        'Start FUNCTION', 0, stepCt, 'Done');
    stepCt := 1;

    --get etl_id
    SELECT bio_assay_analysis_id
    INTO analysis_id
    FROM BIOMART.BIO_ASSAY_ANALYSIS
    WHERE ETL_ID_SOURCE = E_ID;

    --delete data from bio_assay_analysis_data
    BEGIN
    DELETE FROM biomart.bio_assay_analysis_data
    WHERE bio_assay_analysis_id = analysis_id;
    GET DIAGNOSTICS rowCt := ROW_COUNT;
	PERFORM cz_write_audit(jobId, databaseName, procedureName,
        'Delete existing data in bio_assay_analysis_data', rowCt, stepCt, 'Done');
    stepCt := stepCt + 1;
    EXCEPTION
        WHEN OTHERS THEN
        errorNumber := SQLSTATE;
        errorMessage := SQLERRM;
        PERFORM cz_error_handler(jobID, procedureName, errorNumber, errorMessage);
        PERFORM cz_end_audit (jobID, 'FAIL');
        RETURN -16;
    END;

    --delete data from bio_assay_analysis_data_tea
    BEGIN
    DELETE FROM biomart.bio_assay_analysis_data_tea
    WHERE bio_assay_analysis_id = analysis_id;
    GET DIAGNOSTICS rowCt := ROW_COUNT;
	PERFORM cz_write_audit(jobId, databaseName, procedureName,
        'Delete existing data in bio_assay_analysis_data_tea', rowCt, stepCt, 'Done');
    stepCt := stepCt + 1;
    EXCEPTION
        WHEN OTHERS THEN
        errorNumber := SQLSTATE;
        errorMessage := SQLERRM;
        PERFORM cz_error_handler(jobID, procedureName, errorNumber, errorMessage);
        PERFORM cz_end_audit (jobID, 'FAIL');
        RETURN -16;
    END;

    --delete data from bio_asy_analysis_dataset
    BEGIN
    DELETE FROM biomart.bio_asy_analysis_dataset
    WHERE bio_assay_analysis_id = analysis_id;
    GET DIAGNOSTICS rowCt := ROW_COUNT;
	PERFORM cz_write_audit(jobId, databaseName, procedureName,
        'Delete existing data in bio_assay_analysis_dataset', rowCt, stepCt, 'Done');
    stepCt := stepCt + 1;
    EXCEPTION
        WHEN OTHERS THEN
        errorNumber := SQLSTATE;
        errorMessage := SQLERRM;
        PERFORM cz_error_handler(jobID, procedureName, errorNumber, errorMessage);
        PERFORM cz_end_audit (jobID, 'FAIL');
        RETURN -16;
    END;

    --delete from bio_assay_analysis_EQTL
    BEGIN
    DELETE from biomart.bio_assay_analysis_eqtl where bio_assay_analysis_id=analysis_id;
    GET DIAGNOSTICS rowCt := ROW_COUNT;
	PERFORM cz_write_audit(jobId, databaseName, procedureName,
        'Delete existing data in bio_assay_analysis_eqtl', rowCt, stepCt, 'Done');
    stepCt := stepCt + 1;
    EXCEPTION
        WHEN OTHERS THEN
        errorNumber := SQLSTATE;
        errorMessage := SQLERRM;
        PERFORM cz_error_handler(jobID, procedureName, errorNumber, errorMessage);
        PERFORM cz_end_audit (jobID, 'FAIL');
        RETURN -16;
    END;

    --delete from bio_assay_analysis_EXT
    BEGIN
    DELETE FROM biomart.bio_assay_analysis_ext
    WHERE bio_assay_analysis_id = analysis_id;
    GET DIAGNOSTICS rowCt := ROW_COUNT;
	PERFORM cz_write_audit(jobId, databaseName, procedureName,
        'Delete existing data in bio_assay_analysis_ext', rowCt, stepCt, 'Done');
    stepCt := stepCt + 1;
    EXCEPTION
        WHEN OTHERS THEN
        errorNumber := SQLSTATE;
        errorMessage := SQLERRM;
        PERFORM cz_error_handler(jobID, procedureName, errorNumber, errorMessage);
        PERFORM cz_end_audit (jobID, 'FAIL');
        RETURN -16;
    END;

    --delete from bio_assay_analysis_GWAS
    BEGIN
    DELETE FROM biomart.bio_assay_analysis_gwas
    WHERE bio_assay_analysis_id = analysis_id;
    GET DIAGNOSTICS rowCt := ROW_COUNT;
	PERFORM cz_write_audit(jobId, databaseName, procedureName,
        'Delete existing data in bio_assay_analysis_gwas', rowCt, stepCt, 'Done');
    stepCt := stepCt + 1;
    EXCEPTION
        WHEN OTHERS THEN
        errorNumber := SQLSTATE;
        errorMessage := SQLERRM;
        PERFORM cz_error_handler(jobID, procedureName, errorNumber, errorMessage);
        PERFORM cz_end_audit (jobID, 'FAIL');
        RETURN -16;
    END;

    --delete from bio_asy_analysis_EQTL_TOP50
    BEGIN
    DELETE FROM biomart.bio_asy_analysis_eqtl_top50
    WHERE bio_assay_analysis_id = analysis_id;
    GET DIAGNOSTICS rowCt := ROW_COUNT;
	PERFORM cz_write_audit(jobId, databaseName, procedureName,
        'Delete existing data in bio_asy_analysis_eqtl_top50', rowCt, stepCt, 'Done');
    stepCt := stepCt + 1;
    EXCEPTION
        WHEN OTHERS THEN
        errorNumber := SQLSTATE;
        errorMessage := SQLERRM;
        PERFORM cz_error_handler(jobID, procedureName, errorNumber, errorMessage);
        PERFORM cz_end_audit (jobID, 'FAIL');
        RETURN -16;
    END;

    --delete from bio_asy_analysis_gwas_top50
    BEGIN
    DELETE FROM biomart.bio_asy_analysis_gwas_top50
    WHERE bio_assay_analysis_id = analysis_id;
    GET DIAGNOSTICS rowCt := ROW_COUNT;
	PERFORM cz_write_audit(jobId, databaseName, procedureName,
        'Delete existing data in bio_asy_analysis_gwas_top50', rowCt, stepCt, 'Done');
    stepCt := stepCt + 1;
    EXCEPTION
        WHEN OTHERS THEN
        errorNumber := SQLSTATE;
        errorMessage := SQLERRM;
        PERFORM cz_error_handler(jobID, procedureName, errorNumber, errorMessage);
        PERFORM cz_end_audit (jobID, 'FAIL');
        RETURN -16;
    END;

    --delete from bio_data_observation
    BEGIN
    DELETE FROM biomart.bio_data_observation
    WHERE bio_data_id = analysis_id;
    GET DIAGNOSTICS rowCt := ROW_COUNT;
	PERFORM cz_write_audit(jobId, databaseName, procedureName,
        'Delete existing metadata in bio_data_observation', rowCt, stepCt, 'Done');
    stepCt := stepCt + 1;
    EXCEPTION
        WHEN OTHERS THEN
        errorNumber := SQLSTATE;
        errorMessage := SQLERRM;
        PERFORM cz_error_handler(jobID, procedureName, errorNumber, errorMessage);
        PERFORM cz_end_audit (jobID, 'FAIL');
        RETURN -16;
    END;

    --delete from bio_data_platform
    BEGIN
    DELETE FROM biomart.bio_data_platform
    WHERE bio_data_id = analysis_id;
    GET DIAGNOSTICS rowCt := ROW_COUNT;
	PERFORM cz_write_audit(jobId, databaseName, procedureName,
        'Delete existing metadata in bio_data_platform', rowCt, stepCt, 'Done');
    stepCt := stepCt + 1;
    EXCEPTION
        WHEN OTHERS THEN
        errorNumber := SQLSTATE;
        errorMessage := SQLERRM;
        PERFORM cz_error_handler(jobID, procedureName, errorNumber, errorMessage);
        PERFORM cz_end_audit (jobID, 'FAIL');
        RETURN -16;
    END;

    --delete from bio_data_disease
    BEGIN
    DELETE FROM biomart.bio_data_disease
    WHERE bio_data_id = analysis_id;
    GET DIAGNOSTICS rowCt := ROW_COUNT;
	PERFORM cz_write_audit(jobId, databaseName, procedureName,
        'Delete existing metadata in bio_data_disease', rowCt, stepCt, 'Done');
    stepCt := stepCt + 1;
    EXCEPTION
        WHEN OTHERS THEN
        errorNumber := SQLSTATE;
        errorMessage := SQLERRM;
        PERFORM cz_error_handler(jobID, procedureName, errorNumber, errorMessage);
        PERFORM cz_end_audit (jobID, 'FAIL');
        RETURN -16;
    END;

    --delete from bio_assay_analysis
    BEGIN
    DELETE FROM biomart.bio_assay_analysis
    WHERE bio_assay_analysis_id = analysis_id;
    GET DIAGNOSTICS rowCt := ROW_COUNT;
	PERFORM cz_write_audit(jobId, databaseName, procedureName,
        'Delete existing metadata in bio_assay_analysis', rowCt, stepCt, 'Done');
    stepCt := stepCt + 1;
    EXCEPTION
        WHEN OTHERS THEN
        errorNumber := SQLSTATE;
        errorMessage := SQLERRM;
        PERFORM cz_error_handler(jobID, procedureName, errorNumber, errorMessage);
        PERFORM cz_end_audit (jobID, 'FAIL');
        RETURN -16;
    END;

    --delete from tm_lz.lz_src_analysis_metadata
    BEGIN
    DELETE FROM lz_src_analysis_metadata
    WHERE ETL_ID = etlID;
    GET DIAGNOSTICS rowCt := ROW_COUNT;
	PERFORM cz_write_audit(jobId, databaseName, procedureName,
        'Delete existing metadata in lz_src_study_metadata', rowCt, stepCt, 'Done');
    stepCt := stepCt + 1;
    EXCEPTION
        WHEN OTHERS THEN
        errorNumber := SQLSTATE;
        errorMessage := SQLERRM;
        PERFORM cz_error_handler(jobID, procedureName, errorNumber, errorMessage);
        PERFORM cz_end_audit (jobID, 'FAIL');
        RETURN -16;
    END;

    -- Cleanup OVERALL JOB if this proc is being run standalone
    IF newJobFlag = 1 THEN
        PERFORM cz_end_audit(jobID, 'SUCCESS');
    END IF;

    RETURN 0;
EXCEPTION
    WHEN OTHERS THEN
        errorNumber := SQLSTATE;
        errorMessage := SQLERRM;
        PERFORM cz_error_handler(jobID, procedureName, errorNumber, errorMessage);
        PERFORM cz_end_audit (jobID, 'FAIL');
        RETURN -16;
END;

$body$
LANGUAGE PLPGSQL;


